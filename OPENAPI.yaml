openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users in DynamoDB

paths:
  /:
    get:
      summary: Check API status
      responses:
        '200':
          description: API is running successfully
          content:
            application/json:
              schema:
                type: string
              example: "API is running successfully! Try '/get_users' to fetch all users"

  /add_users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: john.doe@example.com
                age:
                  type: integer
                  example: 30
                # Add other user attributes here
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  user_id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  userdetail:
                    type: object
                    example:
                      name: John Doe
                      email: john.doe@example.com
                      age: 30
                      userid: "123e4567-e89b-12d3-a456-426614174000"

  /get_users:
    get:
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      example: john.doe@example.com
                    age:
                      type: integer
                      example: 30
                    userid:
                      type: string
                      example: "123e4567-e89b-12d3-a456-426614174000"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /get_user/{user_id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: The ID of the user to retrieve
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: john.doe@example.com
                  age:
                    type: integer
                    example: 30
                  userid:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: User not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /update_user/{user_id}:
    patch:
      summary: Update user by ID
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: The ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Smith
                email:
                  type: string
                  example: john.smith@example.com
                age:
                  type: integer
                  example: 31
                # Add other user attributes here
      responses:
        '200':
          description: Updated user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: John Smith
                  email:
                    type: string
                    example: john.smith@example.com
                  age:
                    type: integer
                    example: 31
                  userid:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Attribute 'email' not found in existing user details
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /delete_user/{user_id}:
    delete:
      summary: Delete user by ID
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: The ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
